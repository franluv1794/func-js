// SPDX-License-Identifier: MIT
pragma ton-solidity >=0.47.0;

contract CalvoCoin {
    string public name = "CalvoCoin";
    string public symbol = "CALVO";
    uint8 public decimals = 18;
    uint256 public totalSupply = 1_000_000_000 * 10**decimals;

    uint256 public preSaleSupply = totalSupply * 50 / 100;
    uint256 public stakingSupply = totalSupply * 10 / 100;
    uint256 public devTeamSupply = totalSupply * 10 / 100;
    uint256 public marketingSupply = totalSupply * 10 / 100;
    uint256 public projectReserveSupply = totalSupply * 5 / 100;
    uint256 public airdropSupply = totalSupply * 5 / 100;

    mapping(address => uint256) public balances;

    constructor() public {
        balances[msg.sender] = preSaleSupply + stakingSupply + devTeamSupply + marketingSupply + projectReserveSupply + airdropSupply;
    }

    function transfer(address to, uint256 value) public {
        require(balances[msg.sender] >= value, "Insufficient balance");
        balances[msg.sender] -= value;
        balances[to] += value;
        emit Transfer(msg.sender, to, value);
    }

    event Transfer(address indexed from, address indexed to, uint256 value);

    function balanceOf(address account) public view returns (uint256) {
        return balances[account];
    }

    // Add functions for staking, airdrop, etc.
}
